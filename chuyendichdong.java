
import java.util.Arrays;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ADMIN
 */
public class chuyendichdong extends javax.swing.JFrame {

    /**
     * Creates new form chuyendichdong
     */
    public chuyendichdong() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("key");

        jLabel2.setText("key");

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jTextField1))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    
//Mã hóa thuật toán Columnar Transposition Cipher
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
                                                                             
// TODO add your handling code here:  
// TODO add your handling code here:  
// Lấy dữ liệu từ jTextArea1 (plaintext) và jTextField1 (key)
String plaintext = jTextArea1.getText(); // Lấy văn bản rõ từ TextArea
String keyText = jTextField1.getText(); // Lấy khóa từ TextField

// Kiểm tra xem key có rỗng hay không
if (keyText.isEmpty()) { // Nếu khóa rỗng
    jTextArea2.setText("Invalid key! Key cannot be empty."); // Hiển thị thông báo lỗi
    return; // Kết thúc phương thức nếu khóa không hợp lệ
}

// Bước 1: Loại bỏ tất cả khoảng trắng trong plaintext
plaintext = plaintext.replaceAll("\\s+", ""); // Xóa tất cả khoảng trắng trong plaintext

// Bước 2: Tạo bảng với số cột bằng chiều dài của key
int numColumns = keyText.length(); // Số cột bằng độ dài khóa
int numRows = (int) Math.ceil((double) plaintext.length() / numColumns); // Tính số dòng cần thiết
char[][] grid = new char[numRows][numColumns]; // Tạo mảng 2 chiều để chứa ký tự

// Bước 3: Điền các ký tự của plaintext vào bảng
for (int i = 0; i < numRows; i++) { // Lặp qua từng dòng
    for (int j = 0; j < numColumns; j++) { // Lặp qua từng cột
        int charIndex = i * numColumns + j; // Tính chỉ số ký tự trong plaintext
        if (charIndex < plaintext.length()) { // Nếu chỉ số trong phạm vi
            grid[i][j] = plaintext.charAt(charIndex); // Điền ký tự vào bảng
        } else {
            grid[i][j] = ' '; // Thêm khoảng trắng nếu không đủ ký tự
        }
    }
}

// Bước 4: Sắp xếp chỉ số của khóa để xác định thứ tự cột
Integer[] keyOrder = new Integer[numColumns]; // Mảng để lưu thứ tự cột
for (int i = 0; i < numColumns; i++) { // Lặp qua từng cột
    keyOrder[i] = i; // Gán chỉ số cột
}
// Sắp xếp thứ tự các cột dựa trên ký tự trong keyText
Arrays.sort(keyOrder, (a, b) -> Character.compare(keyText.charAt(a), keyText.charAt(b))); 

// Bước 5: Đọc cột theo thứ tự khóa
StringBuilder encryptedText = new StringBuilder(); // Tạo StringBuilder để lưu trữ văn bản mã hóa
for (int col : keyOrder) { // Duyệt qua các cột theo thứ tự khóa
    for (int row = 0; row < numRows; row++) { // Duyệt qua từng dòng
        encryptedText.append(grid[row][col]); // Thêm ký tự vào kết quả từ cột đã sắp xếp
    }
}

// Bước 6: Hiển thị chuỗi đã mã hóa trên jTextArea2
jTextArea2.setText(encryptedText.toString()); // Hiển thị kết quả

    }                                        

    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:                                        
    // Lấy dữ liệu từ jTextArea2 (ciphertext) và jTextField2 (key)
    String ciphertext = jTextArea1.getText(); // Lấy văn bản mã hóa từ TextArea
    String keyText = jTextField2.getText(); // Lấy khóa từ TextField

    // Kiểm tra xem key có rỗng hay không
    if (keyText.isEmpty()) { // Nếu khóa rỗng
        jTextArea2.setText("Invalid key! Key cannot be empty."); // Hiển thị thông báo lỗi
        return; // Kết thúc phương thức nếu khóa không hợp lệ
    }

    // Bước 1: Tạo bảng với số cột bằng chiều dài của key
    int numColumns = keyText.length(); // Số cột bằng độ dài khóa
    int numRows = (int) Math.ceil((double) ciphertext.length() / numColumns); // Tính số dòng cần thiết
    char[][] grid = new char[numRows][numColumns]; // Tạo mảng 2 chiều để chứa ký tự

    // Bước 2: Sắp xếp chỉ số của khóa để xác định thứ tự cột
    Integer[] keyOrder = new Integer[numColumns]; // Mảng để lưu thứ tự cột
    for (int i = 0; i < numColumns; i++) { // Lặp qua từng cột
        keyOrder[i] = i; // Gán chỉ số cột
    }
    // Sắp xếp thứ tự các cột dựa trên ký tự trong keyText
    Arrays.sort(keyOrder, (a, b) -> Character.compare(keyText.charAt(a), keyText.charAt(b))); 

    // Bước 3: Đọc cột theo thứ tự khóa để điền vào bảng
    int currentIndex = 0; // Chỉ số hiện tại để theo dõi vị trí trong ciphertext
    for (int col : keyOrder) { // Duyệt qua các cột theo thứ tự khóa
        for (int row = 0; row < numRows; row++) { // Duyệt qua từng dòng
            if (currentIndex < ciphertext.length()) { // Nếu chỉ số trong phạm vi
                grid[row][col] = ciphertext.charAt(currentIndex); // Điền ký tự vào bảng
                currentIndex++; // Tăng chỉ số hiện tại
            } else {
                grid[row][col] = ' '; // Thêm khoảng trắng nếu không đủ ký tự
            }
        }
    }

    // Bước 4: Đọc lại văn bản đã giải mã theo hàng
    StringBuilder decryptedText = new StringBuilder(); // Tạo StringBuilder để lưu trữ văn bản giải mã
    for (int row = 0; row < numRows; row++) { // Duyệt qua từng dòng
        for (int col = 0; col < numColumns; col++) { // Duyệt qua từng cột
            decryptedText.append(grid[row][col]); // Thêm ký tự vào kết quả từ bảng
        }
    }

    // Bước 5: Hiển thị chuỗi đã giải mã trên jTextArea2
    jTextArea2.setText(decryptedText.toString().trim()); // Hiển thị kết quả và xóa khoảng trắng thừa


    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chuyendichdong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chuyendichdong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chuyendichdong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chuyendichdong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chuyendichdong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}
